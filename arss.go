// WARNING: This file has automatically been generated on Tue, 27 Apr 2021 14:34:23 PDT.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package arss

/*
#cgo pkg-config: fftw3
#include "util.h"
#include "image_io.h"
#include "sound_io.h"
#include "dsp.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// WinReturn function as declared in arss/util.h:16
func WinReturn() {
	C.win_return()
}

// _InlineIsfinitef function as declared in include/math.h:174
func _InlineIsfinitef(arg0 float32) int32 {
	carg0, carg0AllocMap := (C.float)(arg0), cgoAllocsUnknown
	__ret := C.__inline_isfinitef(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _InlineIsfinited function as declared in include/math.h:175
func _InlineIsfinited(arg0 float64) int32 {
	carg0, carg0AllocMap := (C.double)(arg0), cgoAllocsUnknown
	__ret := C.__inline_isfinited(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _InlineIsfinitel function as declared in include/math.h:176
func _InlineIsfinitel(arg0 float64) int32 {
	carg0, carg0AllocMap := (C.double)(arg0), cgoAllocsUnknown
	__ret := C.__inline_isfinitel(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _InlineIsinff function as declared in include/math.h:177
func _InlineIsinff(arg0 float32) int32 {
	carg0, carg0AllocMap := (C.float)(arg0), cgoAllocsUnknown
	__ret := C.__inline_isinff(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _InlineIsinfd function as declared in include/math.h:178
func _InlineIsinfd(arg0 float64) int32 {
	carg0, carg0AllocMap := (C.double)(arg0), cgoAllocsUnknown
	__ret := C.__inline_isinfd(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _InlineIsinfl function as declared in include/math.h:179
func _InlineIsinfl(arg0 float64) int32 {
	carg0, carg0AllocMap := (C.double)(arg0), cgoAllocsUnknown
	__ret := C.__inline_isinfl(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _InlineIsnanf function as declared in include/math.h:180
func _InlineIsnanf(arg0 float32) int32 {
	carg0, carg0AllocMap := (C.float)(arg0), cgoAllocsUnknown
	__ret := C.__inline_isnanf(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _InlineIsnand function as declared in include/math.h:181
func _InlineIsnand(arg0 float64) int32 {
	carg0, carg0AllocMap := (C.double)(arg0), cgoAllocsUnknown
	__ret := C.__inline_isnand(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _InlineIsnanl function as declared in include/math.h:182
func _InlineIsnanl(arg0 float64) int32 {
	carg0, carg0AllocMap := (C.double)(arg0), cgoAllocsUnknown
	__ret := C.__inline_isnanl(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _InlineIsnormalf function as declared in include/math.h:183
func _InlineIsnormalf(arg0 float32) int32 {
	carg0, carg0AllocMap := (C.float)(arg0), cgoAllocsUnknown
	__ret := C.__inline_isnormalf(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _InlineIsnormald function as declared in include/math.h:184
func _InlineIsnormald(arg0 float64) int32 {
	carg0, carg0AllocMap := (C.double)(arg0), cgoAllocsUnknown
	__ret := C.__inline_isnormald(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _InlineIsnormall function as declared in include/math.h:185
func _InlineIsnormall(arg0 float64) int32 {
	carg0, carg0AllocMap := (C.double)(arg0), cgoAllocsUnknown
	__ret := C.__inline_isnormall(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _InlineSignbitf function as declared in include/math.h:186
func _InlineSignbitf(arg0 float32) int32 {
	carg0, carg0AllocMap := (C.float)(arg0), cgoAllocsUnknown
	__ret := C.__inline_signbitf(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _InlineSignbitd function as declared in include/math.h:187
func _InlineSignbitd(arg0 float64) int32 {
	carg0, carg0AllocMap := (C.double)(arg0), cgoAllocsUnknown
	__ret := C.__inline_signbitd(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _InlineSignbitl function as declared in include/math.h:188
func _InlineSignbitl(arg0 float64) int32 {
	carg0, carg0AllocMap := (C.double)(arg0), cgoAllocsUnknown
	__ret := C.__inline_signbitl(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// _Inff function as declared in include/math.h:552
func _Inff() float32 {
	__ret := C.__inff()
	__v := (float32)(__ret)
	return __v
}

// _Inf function as declared in include/math.h:554
func _Inf() float64 {
	__ret := C.__inf()
	__v := (float64)(__ret)
	return __v
}

// _Infl function as declared in include/math.h:556
func _Infl() float64 {
	__ret := C.__infl()
	__v := (float64)(__ret)
	return __v
}

// BlackmanSquareInterpolation function as declared in arss/dsp.h:33
func BlackmanSquareInterpolation(in []float64, out []float64, mi int32, mo int32, lut []float64, lutSize int32) {
	cin, cinAllocMap := copyPDoubleBytes((*sliceHeader)(unsafe.Pointer(&in)))
	cout, coutAllocMap := copyPDoubleBytes((*sliceHeader)(unsafe.Pointer(&out)))
	cmi, cmiAllocMap := (C.int32_t)(mi), cgoAllocsUnknown
	cmo, cmoAllocMap := (C.int32_t)(mo), cgoAllocsUnknown
	clut, clutAllocMap := copyPDoubleBytes((*sliceHeader)(unsafe.Pointer(&lut)))
	clutSize, clutSizeAllocMap := (C.int32_t)(lutSize), cgoAllocsUnknown
	C.blackman_square_interpolation(cin, cout, cmi, cmo, clut, clutSize)
	runtime.KeepAlive(clutSizeAllocMap)
	runtime.KeepAlive(clutAllocMap)
	runtime.KeepAlive(cmoAllocMap)
	runtime.KeepAlive(cmiAllocMap)
	runtime.KeepAlive(coutAllocMap)
	runtime.KeepAlive(cinAllocMap)
}

// FftwInitThreads function as declared in include/fftw3.h:465
func FftwInitThreads() int32 {
	__ret := C.fftw_init_threads()
	__v := (int32)(__ret)
	return __v
}

// FftwfInitThreads function as declared in include/fftw3.h:466
func FftwfInitThreads() int32 {
	__ret := C.fftwf_init_threads()
	__v := (int32)(__ret)
	return __v
}

// FftwlInitThreads function as declared in include/fftw3.h:467
func FftwlInitThreads() int32 {
	__ret := C.fftwl_init_threads()
	__v := (int32)(__ret)
	return __v
}

// BmpIn function as declared in arss/image_io.h:10
func BmpIn(bmpfile []File, y []int32, x []int32) **float64 {
	cbmpfile, cbmpfileAllocMap := unpackArgSFile(bmpfile)
	cy, cyAllocMap := copyPInt32Bytes((*sliceHeader)(unsafe.Pointer(&y)))
	cx, cxAllocMap := copyPInt32Bytes((*sliceHeader)(unsafe.Pointer(&x)))
	__ret := C.bmp_in(cbmpfile, cy, cx)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cyAllocMap)
	packSFile(bmpfile, cbmpfile)
	runtime.KeepAlive(cbmpfileAllocMap)
	__v := *(***float64)(unsafe.Pointer(&__ret))
	return __v
}

// BmpOut function as declared in arss/image_io.h:11
func BmpOut(bmpfile []File, image [][]float64, y int32, x int32) {
	cbmpfile, cbmpfileAllocMap := unpackArgSFile(bmpfile)
	cimage, cimageAllocMap := unpackArgSSFloat64(image)
	cy, cyAllocMap := (C.int32_t)(y), cgoAllocsUnknown
	cx, cxAllocMap := (C.int32_t)(x), cgoAllocsUnknown
	C.bmp_out(cbmpfile, cimage, cy, cx)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cyAllocMap)
	packSSFloat64(image, cimage)
	runtime.KeepAlive(cimageAllocMap)
	packSFile(bmpfile, cbmpfile)
	runtime.KeepAlive(cbmpfileAllocMap)
}

// In8 function as declared in arss/sound_io.h:10
func In8(wavfile []File, sound [][]float64, samplecount int32, channels int32) {
	cwavfile, cwavfileAllocMap := unpackArgSFile(wavfile)
	csound, csoundAllocMap := unpackArgSSFloat64(sound)
	csamplecount, csamplecountAllocMap := (C.int32_t)(samplecount), cgoAllocsUnknown
	cchannels, cchannelsAllocMap := (C.int32_t)(channels), cgoAllocsUnknown
	C.in_8(cwavfile, csound, csamplecount, cchannels)
	runtime.KeepAlive(cchannelsAllocMap)
	runtime.KeepAlive(csamplecountAllocMap)
	packSSFloat64(sound, csound)
	runtime.KeepAlive(csoundAllocMap)
	packSFile(wavfile, cwavfile)
	runtime.KeepAlive(cwavfileAllocMap)
}

// Out8 function as declared in arss/sound_io.h:11
func Out8(wavfile []File, sound [][]float64, samplecount int32, channels int32) {
	cwavfile, cwavfileAllocMap := unpackArgSFile(wavfile)
	csound, csoundAllocMap := unpackArgSSFloat64(sound)
	csamplecount, csamplecountAllocMap := (C.int32_t)(samplecount), cgoAllocsUnknown
	cchannels, cchannelsAllocMap := (C.int32_t)(channels), cgoAllocsUnknown
	C.out_8(cwavfile, csound, csamplecount, cchannels)
	runtime.KeepAlive(cchannelsAllocMap)
	runtime.KeepAlive(csamplecountAllocMap)
	packSSFloat64(sound, csound)
	runtime.KeepAlive(csoundAllocMap)
	packSFile(wavfile, cwavfile)
	runtime.KeepAlive(cwavfileAllocMap)
}

// In16 function as declared in arss/sound_io.h:12
func In16(wavfile []File, sound [][]float64, samplecount int32, channels int32) {
	cwavfile, cwavfileAllocMap := unpackArgSFile(wavfile)
	csound, csoundAllocMap := unpackArgSSFloat64(sound)
	csamplecount, csamplecountAllocMap := (C.int32_t)(samplecount), cgoAllocsUnknown
	cchannels, cchannelsAllocMap := (C.int32_t)(channels), cgoAllocsUnknown
	C.in_16(cwavfile, csound, csamplecount, cchannels)
	runtime.KeepAlive(cchannelsAllocMap)
	runtime.KeepAlive(csamplecountAllocMap)
	packSSFloat64(sound, csound)
	runtime.KeepAlive(csoundAllocMap)
	packSFile(wavfile, cwavfile)
	runtime.KeepAlive(cwavfileAllocMap)
}

// Out16 function as declared in arss/sound_io.h:13
func Out16(wavfile []File, sound [][]float64, samplecount int32, channels int32) {
	cwavfile, cwavfileAllocMap := unpackArgSFile(wavfile)
	csound, csoundAllocMap := unpackArgSSFloat64(sound)
	csamplecount, csamplecountAllocMap := (C.int32_t)(samplecount), cgoAllocsUnknown
	cchannels, cchannelsAllocMap := (C.int32_t)(channels), cgoAllocsUnknown
	C.out_16(cwavfile, csound, csamplecount, cchannels)
	runtime.KeepAlive(cchannelsAllocMap)
	runtime.KeepAlive(csamplecountAllocMap)
	packSSFloat64(sound, csound)
	runtime.KeepAlive(csoundAllocMap)
	packSFile(wavfile, cwavfile)
	runtime.KeepAlive(cwavfileAllocMap)
}

// In32 function as declared in arss/sound_io.h:14
func In32(wavfile []File, sound [][]float64, samplecount int32, channels int32) {
	cwavfile, cwavfileAllocMap := unpackArgSFile(wavfile)
	csound, csoundAllocMap := unpackArgSSFloat64(sound)
	csamplecount, csamplecountAllocMap := (C.int32_t)(samplecount), cgoAllocsUnknown
	cchannels, cchannelsAllocMap := (C.int32_t)(channels), cgoAllocsUnknown
	C.in_32(cwavfile, csound, csamplecount, cchannels)
	runtime.KeepAlive(cchannelsAllocMap)
	runtime.KeepAlive(csamplecountAllocMap)
	packSSFloat64(sound, csound)
	runtime.KeepAlive(csoundAllocMap)
	packSFile(wavfile, cwavfile)
	runtime.KeepAlive(cwavfileAllocMap)
}

// Out32 function as declared in arss/sound_io.h:15
func Out32(wavfile []File, sound [][]float64, samplecount int32, channels int32) {
	cwavfile, cwavfileAllocMap := unpackArgSFile(wavfile)
	csound, csoundAllocMap := unpackArgSSFloat64(sound)
	csamplecount, csamplecountAllocMap := (C.int32_t)(samplecount), cgoAllocsUnknown
	cchannels, cchannelsAllocMap := (C.int32_t)(channels), cgoAllocsUnknown
	C.out_32(cwavfile, csound, csamplecount, cchannels)
	runtime.KeepAlive(cchannelsAllocMap)
	runtime.KeepAlive(csamplecountAllocMap)
	packSSFloat64(sound, csound)
	runtime.KeepAlive(csoundAllocMap)
	packSFile(wavfile, cwavfile)
	runtime.KeepAlive(cwavfileAllocMap)
}

// WavIn function as declared in arss/sound_io.h:16
func WavIn(wavfile []File, channels []int32, samplecount []int32, samplerate []int32) **float64 {
	cwavfile, cwavfileAllocMap := unpackArgSFile(wavfile)
	cchannels, cchannelsAllocMap := copyPInt32Bytes((*sliceHeader)(unsafe.Pointer(&channels)))
	csamplecount, csamplecountAllocMap := copyPInt32Bytes((*sliceHeader)(unsafe.Pointer(&samplecount)))
	csamplerate, csamplerateAllocMap := copyPInt32Bytes((*sliceHeader)(unsafe.Pointer(&samplerate)))
	__ret := C.wav_in(cwavfile, cchannels, csamplecount, csamplerate)
	runtime.KeepAlive(csamplerateAllocMap)
	runtime.KeepAlive(csamplecountAllocMap)
	runtime.KeepAlive(cchannelsAllocMap)
	packSFile(wavfile, cwavfile)
	runtime.KeepAlive(cwavfileAllocMap)
	__v := *(***float64)(unsafe.Pointer(&__ret))
	return __v
}

// WavOut function as declared in arss/sound_io.h:17
func WavOut(wavfile []File, sound [][]float64, channels int32, samplecount int32, samplerate int32, formatParam int32) {
	cwavfile, cwavfileAllocMap := unpackArgSFile(wavfile)
	csound, csoundAllocMap := unpackArgSSFloat64(sound)
	cchannels, cchannelsAllocMap := (C.int32_t)(channels), cgoAllocsUnknown
	csamplecount, csamplecountAllocMap := (C.int32_t)(samplecount), cgoAllocsUnknown
	csamplerate, csamplerateAllocMap := (C.int32_t)(samplerate), cgoAllocsUnknown
	cformatParam, cformatParamAllocMap := (C.int32_t)(formatParam), cgoAllocsUnknown
	C.wav_out(cwavfile, csound, cchannels, csamplecount, csamplerate, cformatParam)
	runtime.KeepAlive(cformatParamAllocMap)
	runtime.KeepAlive(csamplerateAllocMap)
	runtime.KeepAlive(csamplecountAllocMap)
	runtime.KeepAlive(cchannelsAllocMap)
	packSSFloat64(sound, csound)
	runtime.KeepAlive(csoundAllocMap)
	packSFile(wavfile, cwavfile)
	runtime.KeepAlive(cwavfileAllocMap)
}

// WavOutParam function as declared in arss/sound_io.h:18
func WavOutParam() int32 {
	__ret := C.wav_out_param()
	__v := (int32)(__ret)
	return __v
}
